openapi: 3.0.0
info:
  title: Events Dapp
  description: An Event Management Dapp with Metamask Login Support
  version: 1.0.0
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid
  schemas:
    address:
      type: string
      maxLength: 42
      minLength: 42
      example: "0x9fB48802C9c9A187Df19AF823a792b909bec8576"
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Mega Party at John/'s
        description:
          type: string
          example: It/'s a mega party and it/'s at John/'s
        location:
          type: string
          example: Merry Street, 24, Portland
        date:
          type: string
          format: date
        spaceId:
          type: number
    Space:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
        name:
          type: string
          example: John/'s Crib
        location:
          type: string
          example: Merry Street, 24
        active:
          type: boolean
        userID:
          type: number
          example: 1
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John
        address:
          $ref: "#/components/schemas/address"
paths:
  /events:
    get:
      tags:
        - events
      summary: Returns a list of Events, ordered by date descending
      responses:
        "200":
          description: a JSON array of Events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

    post:
      tags:
        - events
      summary: Updates or Creates the provided Event
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: Event was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized - user is not authenticated
        "403":
          description: Forbidden - user does not own the affected relations
  /events/space/{spaceId}:
    get:
      tags:
        - events
      summary: Returns a list of Events that are related to a single spaceId
      parameters:
        - name: spaceId
          in: path
          required: true
          description: Id of the related Space
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: List of Events related to a specific Space
        "404":
          description: Record not found
  /spaces:
    get:
      tags:
        - spaces
      summary: Returns a list of all Spaces
      responses:
        "200":
          description: The resulting list of Spaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Space"
    put:
      tags:
        - spaces
      summary: Updates a Space info
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Space"
      responses:
        "200":
          description: Space was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        "401":
          description: Unauthorized - user is not authenticated
        "403":
          description: Forbidden - user does not own the affected relations
  /spaces/{spaceId}:
    get:
      tags:
        - spaces
      summary: Returns a specific Space
      parameters:
        - name: spaceId
          in: path
          required: true
          description: Id of the related Space
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Returned Space
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        "404":
          description: Record not found
  /user:
    put:
      tags:
        - user
      summary: Updates a user
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User was successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized - user is not authenticated
        "403":
          description: Forbidden - user does not own the affected relations
  /auth/nonce/{pubkey}:
    get:
      tags:
        - auth
      summary: Gets a nonce which should be signed with the User's private key to beat the challenge
      parameters:
        - name: pubkey
          in: path
          required: true
          description: public key/wallet address of the authenticating User
          schema:
            $ref: "#/components/schemas/address"
      responses:
        "200":
          description: successfully got the nonce for signing
  /auth/login:
    post:
      tags:
        - auth
      summary: Reads the provided public key with signed message and tries to log the User in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pubkey:
                  $ref: "#/components/schemas/address"
                signedmsg:
                  type: string
                  description: The nonce returned by the previous login step, signed by the user's private key
      responses:
        "200":
          description: "Successfully logged in"
          headers:
            Set-Cookie:
              $ref: "#/components/securitySchemes/cookieAuth"
        "401":
          description: "Failed to log in"
